function e(e){return e&&e.__esModule?e.default:e}var t={},i=[],n=e=>e,r=i.map,s=Array.isArray,o="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:setTimeout,a=e=>{var t="";if("string"==typeof e)return e;if(s(e))for(var i,n=0;n<e.length;n++)(i=a(e[n]))&&(t+=(t&&" ")+i);else for(var n in e)e[n]&&(t+=(t&&" ")+n);return t},l=(e,t)=>{for(var i in{...e,...t})if("function"==typeof(s(e[i])?e[i][0]:e[i]))t[i]=e[i];else if(e[i]!==t[i])return!0},c=e=>null==e?e:e.key,d=(e,t,i,n,r,s)=>{if("key"===t);else if("style"===t)for(var o in{...i,...n})i=null==n||null==n[o]?"":n[o],"-"===o[0]?e[t].setProperty(o,i):e[t][o]=i;else"o"===t[0]&&"n"===t[1]?((e.events||(e.events={}))[t=t.slice(2)]=n)?i||e.addEventListener(t,r):e.removeEventListener(t,r):!s&&"list"!==t&&"form"!==t&&t in e?e[t]=null==n?"":n:null==n||!1===n||"class"===t&&!(n=a(n))?e.removeAttribute(t):e.setAttribute(t,n)},u=(e,t,i)=>{var n=e.props,r=3===e.type?document.createTextNode(e.tag):(i=i||"svg"===e.tag)?document.createElementNS("http://www.w3.org/2000/svg",e.tag,n.is&&n):document.createElement(e.tag,n.is&&n);for(var s in n)d(r,s,null,n[s],t,i);for(var o=0;o<e.children.length;o++)r.appendChild(u(e.children[o]=g(e.children[o]),t,i));return e.node=r},p=(e,t,i,n,r,s)=>{if(i===n);else if(null!=i&&3===i.type&&3===n.type)i.tag!==n.tag&&(t.nodeValue=n.tag);else if(null==i||i.tag!==n.tag)t=e.insertBefore(u(n=g(n),r,s),t),null!=i&&e.removeChild(i.node);else{var o,a,l,m,f=i.props,y=n.props,h=i.children,b=n.children,w=0,_=0,k=h.length-1,E=b.length-1;for(var T in s=s||"svg"===n.tag,{...f,...y})("value"===T||"selected"===T||"checked"===T?t[T]:f[T])!==y[T]&&d(t,T,f[T],y[T],r,s);for(;_<=E&&w<=k&&null!=(l=c(h[w]))&&l===c(b[_]);)p(t,h[w].node,h[w],b[_]=g(b[_++],h[w++]),r,s);for(;_<=E&&w<=k&&null!=(l=c(h[k]))&&l===c(b[E]);)p(t,h[k].node,h[k],b[E]=g(b[E--],h[k--]),r,s);if(w>k)for(;_<=E;)t.insertBefore(u(b[_]=g(b[_++]),r,s),(a=h[w])&&a.node);else if(_>E)for(;w<=k;)t.removeChild(h[w++].node);else{var S={},v={};for(T=w;T<=k;T++)null!=(l=h[T].key)&&(S[l]=h[T]);for(;_<=E;)l=c(a=h[w]),m=c(b[_]=g(b[_],a)),v[l]||null!=m&&m===c(h[w+1])?(null==l&&t.removeChild(a.node),w++):null==m||1===i.type?(null==l&&(p(t,a&&a.node,a,b[_],r,s),_++),w++):(l===m?(p(t,a.node,a,b[_],r,s),v[m]=!0,w++):null!=(o=S[m])?(p(t,t.insertBefore(o.node,a&&a.node),o,b[_],r,s),v[m]=!0):p(t,a&&a.node,null,b[_],r,s),_++);for(;w<=k;)null==c(a=h[w++])&&t.removeChild(a.node);for(var T in S)null==v[T]&&t.removeChild(S[T].node)}}return n.node=t},g=(e,t)=>!0!==e&&!1!==e&&e?"function"==typeof e.tag?((!t||null==t.memo||((e,t)=>{for(var i in e)if(e[i]!==t[i])return!0;for(var i in t)if(e[i]!==t[i])return!0})(t.memo,e.memo))&&((t=e.tag(e.memo)).memo=e.memo),t):e:y(""),m=e=>3===e.nodeType?y(e.nodeValue,e):f(e.nodeName.toLowerCase(),t,r.call(e.childNodes,m),1,e),f=(e,t,i,n,r)=>({tag:e,props:t,key:t.key,children:i,type:n,node:r}),y=(e,n)=>f(e,t,i,3,n);const h=e=>" "==e||"\t"==e||"\n"==e||"\r"==e,b=(e,t)=>{let n,r,o,a,l,c=[],d="",u=0,p=!0;const g=e=>(e||0===e)&&c.push("string"==typeof e?y(e):"number"==typeof e?y(""+e):e),m=(e,t=e.flat(2))=>{g(n.call?n(o,t):((e,t,n=i)=>f(e,t,s(n)?n:[n]))(n,o,t)),u=0},b=e=>{e&&(d=d.trimEnd()),d&&g(d),p=!1,d=""},w=()=>{a=[c,n,o,a],c=[],u=0},_=(e=u)=>{n=d,d="",o={},u=e},k=(e=u)=>{o[d]=!0,u=e,d=""},E=e=>{o[r]=e,u=5,d=""},T=()=>{let e=c;[c,n,o,a]=a,m(e)};for(let i=0;i<e.length;i++){for(let t=0;t<e[i].length;t++)l=e[i][t],0==u?"<"==l?u=2:h(l)?"\n"==l?p=!0:p||(u=1,d=l):(u=1,d=l):1==u?"<"==l?u=2:"\n"==l?(b(!1),p=!0,u=0):d+=l:2==u?"/"==l?(u=3,b(!0)):(u=4,b(!1),d=l):3==u?">"==l&&T():4==u?h(l)?_(5):"/"==l?_(6):">"==l?(_(),w()):d+=l:6==u?">"==l&&m([]):5==u?"."==l||("/"==l?u=6:">"==l?w():h(l)||(d=l,u=7)):7==u?"="==l?(r=d,u=8):">"==l?(k(),w()):"/"==l?k(6):h(l)?k(5):d+=l:8==u?'"'==l&&(u=9,d=""):9==u&&('"'==l?E(d):d+=l);2==u?(n=t[i],o={},u=5):1==u?(b(!t[i]),g(t[i])):5==u?o={...o,...t[i]}:8==u?E(t[i]):9==u?d+=t[i]:0==u&&null!=t[i]&&g(t[i])}return c=c.flat(2),c.length>1?c:c[0]};var w=(e,...t)=>b(e,t);var _=e=>w`<div>${e.wallet} publicKey: ${e.publicKey}</div>`;function k(){const e=new Uint32Array(4);if("undefined"!=typeof crypto&&crypto.getRandomValues)crypto.getRandomValues(e);else for(let t=0;t<e.length;t++)e[t]=Math.floor(4294967295*Math.random());return Array.from(e).map((e=>e.toString(36))).join("")}var E={public_key:{risk:"low",title:"View public key",description:"Requests account public key. It's a simple way of authentication for Stellar-based applications. The response ensures that a user owns the corresponding secret key.",unsafe:!1,implicitFlow:!1,params:{token:{description:"Verification token generated by the application (should be unique or random).",type:"string",required:!1},callback:{description:"Optional URL callback where Albedo will POST a signed token and public key.",type:"string",required:!1},require_existing:{description:"Allow existing Albedo accounts only.",type:"boolean",required:!1}},returns:{pubkey:{description:"User-selected public key.",type:"string"},signed_message:{description:"HEX-encoded authentication message derived from the public key and verification token.",type:"string"},signature:{description:"HEX-encoded ED25519 signature of the authentication message that can be further used to verify user's keypair ownership.",type:"string"}}},sign_message:{risk:"medium",title:"Sign text message",description:"Requests arbitrary message signing. Can be used to implement identity/ownership verification.",unsafe:!1,implicitFlow:!0,params:{message:{description:"Text message to sign.",type:"string",required:!0},pubkey:{description:"Specific public key requested by the application.",type:"string",required:!1},callback:{description:"Optional URL callback where Albedo will POST a signed message.",type:"string",required:!1}},returns:{pubkey:{description:"User-selected public key.",type:"string"},original_message:{description:"Text message to sign from request.",type:"string"},signed_message:{description:"HEX-encoded message derived from the public key and original message.",type:"string"},message_signature:{description:"HEX-encoded ED25519 signature of the signed message.",type:"string"}}},tx:{risk:"high",title:"Sign transaction",description:"Requests a signature for the transaction. Returns the signed transaction envelope that can be submitted to the network or used for multi-sig coordination.",unsafe:!0,implicitFlow:!0,params:{xdr:{description:"XDR-encoded transaction envelope to sign.",type:"string",required:!0},pubkey:{description:"Specific public key requested by the application.",type:"string",required:!1},network:{description:"Stellar network identifier.",type:"string",required:!1},callback:{description:"Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ",type:"string",required:!1},submit:{description:"If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.",type:"boolean",required:!1}},returns:{xdr:{description:"XDR-encoded transaction envelope from request.",type:"string"},tx_hash:{description:"HEX-encoded transaction hash.",type:"string"},signed_envelope_xdr:{description:"XDR-encoded transaction envelope with new signatures.",type:"string"},network:{description:"Stellar network identifier.",type:"string"},result:{description:"Optional response from Horizon if the transaction has been submitted automatically.",type:"object"}}},pay:{risk:"high",title:"Make payment",description:"Requests a payment from a user. Works with any Stellar asset, supports transaction memo.",unsafe:!1,implicitFlow:!0,params:{amount:{description:"Requested payment amount.",type:"string",required:!0},destination:{description:"Payment destination address.",type:"string",required:!0},asset_code:{description:"Asset code (skip for XLM).",type:"string",required:!1},asset_issuer:{description:"Asset issuer (skip for XLM).",type:"string",required:!1},memo:{description:"Transaction memo (required for exchanges and some anchors).",type:"string",required:!1},memo_type:{description:"Transaction memo type.",type:"string",required:!1},pubkey:{description:"Specific public key requested by the application.",type:"string",required:!1},network:{description:'Stellar network identifier ("public" or "testnet").',type:"string",required:!1},callback:{description:"Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ",type:"string",required:!1},submit:{description:"If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.",type:"boolean",required:!1}},returns:{amount:{description:"Payment amount from request.",type:"string"},destination:{description:"Payment destination address from request.",type:"string"},asset_code:{description:"Asset code from request.",type:"string"},asset_issuer:{description:"Asset issuer from request.",type:"string"},memo:{description:"Transaction memo from request.",type:"string"},memo_type:{description:"Transaction memo type from request.",type:"string"},tx_hash:{description:"HEX-encoded transaction hash.",type:"string"},signed_envelope_xdr:{description:"XDR-encoded transaction envelope with new signatures.",type:"string"},pubkey:{description:"User-selected public key.",type:"string"},network:{description:"Stellar network identifier.",type:"string"},result:{description:"Optional response from Horizon if the transaction has been submitted automatically.",type:"object"}}},trust:{risk:"low",title:"Establish trustline",description:"Requests permission to create a trustline to a given Stellar asset. Gradually simplifies the process of creating trustlines for anchors, ICOs, and airdrops.",unsafe:!1,implicitFlow:!0,params:{asset_code:{description:"Trustline asset code.",type:"string",required:!0},asset_issuer:{description:"Trustline asset issuer address.",type:"string",required:!0},limit:{description:"Trust limit.",type:"string",required:!1},memo:{description:"Transaction memo (required for exchanges and some anchors).",type:"string",required:!1},memo_type:{description:"Transaction memo type.",type:"string",required:!1},pubkey:{description:"Specific public key requested by the application.",type:"string",required:!1},network:{description:'Stellar network identifier ("public" or "testnet").',type:"string",required:!1},callback:{description:"Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ",type:"string",required:!1},submit:{description:"If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.",type:"boolean",required:!1}},returns:{asset_code:{description:"Trustline asset code from request.",type:"string"},asset_issuer:{description:"Trustline asset issuer address from request.",type:"string"},limit:{description:"Trust limit from request.",type:"string"},tx_hash:{description:"HEX-encoded transaction hash.",type:"string"},signed_envelope_xdr:{description:"XDR-encoded transaction envelope with new signatures.",type:"string"},pubkey:{description:"User-selected public key.",type:"string"},network:{description:"Stellar network identifier.",type:"string"},result:{description:"Optional response from Horizon if the transaction has been submitted automatically.",type:"object"}}},exchange:{risk:"high",title:"Purchase tokens",description:"Requests permission to buy tokens on Stellar DEX at market price.",unsafe:!0,implicitFlow:!1,params:{amount:{description:"The amount of asset to buy.",type:"string",required:!0},max_price:{description:"Maximum price the user willing to pay.",type:"string",required:!0},sell_asset_code:{description:"Asset code of the asset to sell.",type:"string",required:!1},sell_asset_issuer:{description:"Issuer account of the asset to sell.",type:"string",required:!1},buy_asset_code:{description:"Asset code of the asset to buy.",type:"string",required:!1},buy_asset_issuer:{description:"Issuer account of the asset to buy.",type:"string",required:!1},memo:{description:"Transaction memo (required for exchanges and some anchors).",type:"string",required:!1},memo_type:{description:"Transaction memo type.",type:"string",required:!1},pubkey:{description:"Specific public key requested by the application.",type:"string",required:!1},network:{description:'Stellar network identifier ("public" or "testnet").',type:"string",required:!1},callback:{description:"Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon.",type:"string",required:!1},submit:{description:"If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.",type:"boolean",required:!1}},returns:{amount:{description:"The amount of asset to buy from request.",type:"string"},max_price:{description:"Maximum price the user willing to pay from request.",type:"string"},sell_asset_code:{description:"Asset code of the asset to sell from request.",type:"string"},sell_asset_issuer:{description:"Issuer account of the asset to sell from request.",type:"string"},buy_asset_code:{description:"Asset code of the asset to buy from request.",type:"string"},buy_asset_issuer:{description:"Issuer account of the asset to buy from request.",type:"string"},tx_hash:{description:"HEX-encoded transaction hash.",type:"string"},signed_envelope_xdr:{description:"XDR-encoded transaction envelope with new signatures.",type:"string"},pubkey:{description:"User-selected public key.",type:"string"},network:{description:"Stellar network identifier.",type:"string"},result:{description:"Optional response from Horizon if the transaction has been submitted automatically.",type:"object"}}},implicit_flow:{risk:"high",title:"Implicit permissions",description:'Requests temporary access token for one or more intents that can be used to execute actions without explicit confirmation from the user. In order to be executed implicitly, an implicit flow permissions for a given intent should be granted and "pubkey" parameter set.',unsafe:!0,implicitFlow:!1,params:{intents:{description:"Requested implicit flow intents.",type:"string|string[]",required:!0},network:{description:'Stellar network identifier ("public" or "testnet").',type:"string",required:!1}},returns:{granted:{description:"Whether a user granted permissions or not.",type:"boolean"},intents:{description:"Requested implicit flow intents.",type:"string[]"},grants:{description:"Implicit flow intents that have been granted.",type:"string[]"},session:{description:"Unique implicit session id.",type:"string"},valid_until:{description:"Session expiration timestamp.",type:"number"},pubkey:{description:"User-selected public key.",type:"string"},network:{description:"Stellar network identifier.",type:"string"}}},manage_account:{risk:"low",title:"Open account settings",description:"Opens account settings window for a given account.",unsafe:!1,implicitFlow:!1,params:{pubkey:{description:"Specific public key requested by the application.",type:"string",required:!0},network:{description:'Stellar network identifier ("public" or "testnet").',type:"string",required:!1}},returns:{pubkey:{description:"Public key from intent request.",type:"string"}}}};var T,S={unhandledError:{message:"Unhandled error occurred. If this error persists, please contact Albedo support.",code:-1},externalError:{message:"External error occurred.",code:-2},invalidIntentRequest:{message:"Intent request is invalid.",code:-3},actionRejectedByUser:{message:"Action request was rejected by the user.",code:-4},horizonError:{message:"Transaction failed when submitted to Stellar network.",code:-5},callbackError:{message:"Callback redirect failed.",code:-6}};function v(e,t=!1){this.windowHandler=e,this.ephemeral=!!t,this.isLoaded=!1,this.pendingRequests={},this.preprocessRequestParams=null,this.onLoaded=new Promise(((e,t)=>this.onLoadedCallback=e)).then((()=>this)),this.messageHandler=this.messageHandler.bind(this),window.addEventListener("message",this.messageHandler,!1)}T=JSON.parse('{"name":"@albedo-link/intent","version":"0.11.2","description":"A lightweight browser wrapper for Albedo API that provides a promise-based interface for all supported intents.","author":"StellarExpertTeam<info@stellar.expert>","license":"MIT","homepage":"https://github.com/stellar-expert/albedo","bugs":{"url":"https://github.com/stellar-expert/albedo/issues","email":"info@stellar.expert"},"repository":{"type":"git","url":"https://github.com/stellar-expert/albedo.git"},"scripts":{"build":"webpack --mode=production --config ./webpack.config.js","postbuild":"node build/generate-docs.js","test":"mocha"},"main":"./lib/albedo.intent.js","module":"./src/index.js","types":"./src/index.d.ts","keywords":["albedo","stellar","SSO","signer","intent","multi-sig"],"devDependencies":{"@babel/core":"^7.14.5","@babel/plugin-proposal-class-properties":"^7.14.5","@babel/plugin-proposal-object-rest-spread":"^7.14.5","@babel/preset-env":"^7.14.5","@babel/register":"^7.14.5","babel-loader":"^8.2.2","chai":"^4.3.4","mocha":"^9.0.0","sinon":"^11.1.1","terser-webpack-plugin":"^5.1.3","webpack":"^5.38.1","webpack-cli":"^4.7.2"},"mocha":{"recursive":true,"require":["@babel/register","./test/test-helper.js"],"ui":"bdd"}}'),v.prototype={isLoaded:!1,markLoaded(){const{onLoadedCallback:e}=this;e&&(this.onLoadedCallback=null,this.isLoaded=!0,e())},messageHandler({data:e}){if(e.albedo){const{version:t}=e.albedo;return this.markLoaded()}if(e.albedoIntentResult){const{__reqid:t,...i}=e.albedoIntentResult,n=this.pendingRequests[t];n&&(delete this.pendingRequests[t],n(i.error,i),this.ephemeral&&(window.removeEventListener("message",this.messageHandler,!1),this.windowHandler.close()))}},transportCloseHandler(){for(let e in this.pendingRequests)if(this.pendingRequests.hasOwnProperty(e)){const t=this.pendingRequests[e];delete this.pendingRequests[e],t(S.actionRejectedByUser)}},postMessage(t){const i=k();return new Promise(((n,r)=>{this.onLoaded.then((()=>{this.pendingRequests[i]=(e,t)=>e?r(e):n(t),t=Object.assign({__reqid:i,__albedo_intent_version:e(T).version},t),this.preprocessRequestParams&&(t=this.preprocessRequestParams(t)),this.windowHandler.postMessage(t,"*")}))}))}};var q=v;let A=null;function C(e){if(!A){const t=document.createElement("iframe");t.style.border="none",Object.assign(t,{width:"0",height:"0",frameBorder:"0",referrerPolicy:"origin",src:`${e}`}),document.body.appendChild(t),A=new q(t.contentWindow)}return A.onLoaded}function R({session:e,pubkey:t,grants:i,valid_until:n}){this.key=e,this.pubkey=t,this.grants=i.slice(),this.validUntil=n,Object.freeze(this),Object.freeze(this.grants)}R.prototype={key:"",pubkey:"",grants:[],validUntil:0,get isExpired(){return this.validUntil-2e3<(new Date).getTime()},toJSON(){return{session:this.key,pubkey:this.pubkey,grants:this.grants.slice(),valid_until:this.validUntil}}};var O=R;function N(){return window.sessionStorage}function I(e){let t;{const i=N().getItem("albedo_session_"+e);i&&(t=new O(JSON.parse(i)))}return t?t.isExpired?(U(e),null):t:null}function x(e,t){const i=I(t);return i&&i.grants.includes(e)?i:null}function U(e){N().removeItem("albedo_session_"+e)}function P(e){return Object.assign(new Error,S.invalidIntentRequest,{ext:e})}function H(e,t){try{const{intent:i}=e;if(!i)throw P('Parameter "intent" is required.');const n=E[i];if(!n)throw P(`Unknown intent: "${i}".`);const r=function(e,t){if("object"!=typeof t)throw P("Intent parameters expected.");const{intent:i,pubkey:n}=t,r={intent:i};if(n&&!/^G[0-9A-Z]{55}$/.test(n))throw P('Invalid "pubkey" parameter. Stellar account public key expected.');for(const n in e.params){const s=e.params[n],o=t[n];if(o)r[n]=o;else if(s.required)throw P(`Parameter "${n}" is required for intent "${i}".`)}return r}(n,e);return function(e,t){if(e.pubkey){const i=x(e.intent,e.pubkey);if(i)return e.session=i.key,C(t)}return setTimeout((()=>{"implicit_flow"===e.intent&&C(t)}),200),function(e){const t=`${e}/confirm`,i=void 0!==window.screenLeft?window.screenLeft:window.screenX,n=void 0!==window.screenTop?window.screenTop:window.screenY,r=(window.innerWidth?window.innerWidth:document.documentElement.clientWidth?document.documentElement.clientWidth:screen.width)/2-220+i,s=(window.innerHeight?window.innerHeight:document.documentElement.clientHeight?document.documentElement.clientHeight:screen.height)/2-300+n,o=window.open(t,"auth.albedo.link",`height=600,width=440,top=${s},left=${r},menubar=0,toolbar=0,location=0,status=0,personalbar=0,scrollbars=0,dependent=1`);return new q(o,!0).onLoaded}(t)}(r,t).then((e=>function(e,t){return t.postMessage(e).then((e=>("implicit_flow"===e.intent&&e.granted&&function(e){const t=new O(e);N().setItem("albedo_session_"+t.pubkey,JSON.stringify(t))}(e),e)))}(r,e)))}catch(e){const{code:t=-1,message:i,ext:n}=e,r={message:i,code:t};return n&&(r.ext=n),Promise.reject(r)}}if("object"==typeof window&&"function"!=typeof window.fetch)throw new Error("Browser FetchAPI is not available. For legacy browsers support use polyfills such as whatwg-fetch.");function L(){}function M(e){switch(typeof e){case"string":return e;case"undefined":return""}return JSON.stringify(e)}L.prototype={frontendUrl:"https://albedo.link",intentInterface:E,intentErrors:S,request(e,t){return H(Object.assign(t||{},{intent:e}),this.frontendUrl)},implicitFlow(e){return this.request("implicit_flow",e)},publicKey(e){return(e=Object.assign({},e)).token||(e.token=k()),this.request("public_key",e)},tx(e){return this.request("tx",e)},pay(e){return this.request("pay",e)},trust(e){return this.request("trust",e)},exchange(e){return this.request("exchange",e)},signMessage(e){return e=Object.assign({},e,{message:M(e.message)}),this.request("sign_message",e)},manageAccount(e){return this.request("manage_account",e)},generateRandomToken:()=>k(),isImplicitSessionAllowed:(e,t)=>!!x(e,t),listImplicitSessions:()=>function(){const e=N();return Object.keys(e).filter((e=>0===e.indexOf("albedo_session_"))).map((e=>I(e.substr("albedo_session_".length)))).filter((e=>!!e))}(),forgetImplicitSession(e){U(e)}};const j=new L;var D;j.default=j,D=j,"undefined"!=typeof document&&document.addEventListener&&document.addEventListener("click",(function(e){if("A"!==e.target.tagName||0!==(e.target.href||"").indexOf("web+stellar:"))return;e.preventDefault(),e.stopImmediatePropagation();const{pathname:t,search:i}=new URL(e.target.href);if(!["tx","pay"].includes(t))return void alert(`Invalid operation requested: ${t}. It's likely an external application error. Please contact support team of ${window.location.origin}.`);const n=function(e=null){null===e&&(e=window.location.search),"?"===e[0]&&(e=e.substr(1));const t={};for(let i of e.split("&")){const[e,n]=i.split("=").map((e=>decodeURIComponent(e)));t[e]=n}return t}(i);D.request(t,n)}),!1);var K=j;const X=(e,t)=>({...e,wallet:"albedo",publicKey:t.pubkey}),F=(e,t)=>[{...e,publicKey:t},[async e=>{await K.publicKey({}).then((t=>{e(X,t)}))}]];var B,G,$={};B=$,G=function(){return function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){var n,r,s,o,a;i.r(t),(s=n||(n={})).CREATE_ACCOUNT="CREATE_ACCOUNT",s.FUND_ACCOUNT="FUND_ACCOUNT",s.ADD_ACCOUNT="ADD_ACCOUNT",s.IMPORT_ACCOUNT="IMPORT_ACCOUNT",s.LOAD_ACCOUNT="LOAD_ACCOUNT",s.MAKE_ACCOUNT_ACTIVE="MAKE_ACCOUNT_ACTIVE",s.UPDATE_ACCOUNT_NAME="UPDATE_ACCOUNT_NAME",s.GET_MNEMONIC_PHRASE="GET_MNEMONIC_PHRASE",s.CONFIRM_MNEMONIC_PHRASE="CONFIRM_MNEMONIC_PHRASE",s.RECOVER_ACCOUNT="RECOVER_ACCOUNT",s.CONFIRM_PASSWORD="CONFIRM_PASSWORD",s.REJECT_ACCESS="REJECT_ACCESS",s.GRANT_ACCESS="GRANT_ACCESS",s.SIGN_TRANSACTION="SIGN_TRANSACTION",s.REJECT_TRANSACTION="REJECT_TRANSACTION",s.SIGN_OUT="SIGN_OUT",s.SHOW_BACKUP_PHRASE="SHOW_BACKUP_PHRASE",s.SAVE_SETTINGS="SAVE_SETTINGS",s.LOAD_SETTINGS="LOAD_SETTINGS",s.GET_CACHED_ASSET_ICON="GET_CACHED_ASSET_ICON",s.CACHE_ASSET_ICON="CACHE_ASSET_ICON",function(e){e.REQUEST_ACCESS="REQUEST_ACCESS",e.SUBMIT_TRANSACTION="SUBMIT_TRANSACTION",e.REQUEST_NETWORK="REQUEST_NETWORK"}(r||(r={})),function(e){e.TESTNET="Test network",e.PUBNET="Public network"}(o||(o={})),function(e){e.PUBLIC="PUBLIC",e.TESTNET="TESTNET"}(a||(a={}));class l extends Error{constructor(){super(...arguments),this.message="Freighter does not appear to be installed."}}const c=e=>{const t=Date.now()+Math.random();return window.postMessage({source:"FREIGHTER_EXTERNAL_MSG_REQUEST",messageId:t,...e},window.location.origin),new Promise(((e,i)=>{window.freighter||i(new l);const n=i=>{var r,s;i.source===window&&"FREIGHTER_EXTERNAL_MSG_RESPONSE"===(null===(r=null==i?void 0:i.data)||void 0===r?void 0:r.source)&&(null===(s=null==i?void 0:i.data)||void 0===s?void 0:s.messagedId)===t&&(e(i.data),window.removeEventListener("message",n))};window.addEventListener("message",n,!1)}))},d=()=>(async()=>{let e={publicKey:"",error:""};try{e=await c({type:r.REQUEST_ACCESS})}catch(e){console.error(e)}const{publicKey:t,error:i}=e;if(i)throw i;return t})(),u=(e,t)=>(async(e,t)=>{let i={signedTransaction:"",error:""};if(t&&t!==a.PUBLIC&&t!==a.TESTNET)throw`Network must be ${a.PUBLIC} or ${a.TESTNET}`;try{i=await c({transactionXdr:e,network:t,type:r.SUBMIT_TRANSACTION})}catch(e){console.error(e)}const{signedTransaction:n,error:s}=i;if(s)throw s;return n})(e,t),p=()=>!!window.freighter,g=()=>(async()=>{let e={network:"",error:""};try{e=await c({type:r.REQUEST_NETWORK})}catch(e){console.error(e)}const{network:t,error:i}=e;if(i)throw i;return t})();i.d(t,"getPublicKey",(function(){return d})),i.d(t,"signTransaction",(function(){return u})),i.d(t,"isConnected",(function(){return p})),i.d(t,"getNetwork",(function(){return g})),t.default={getPublicKey:d,signTransaction:u,isConnected:p,getNetwork:g}}])},"object"==typeof $?$=G():"function"==typeof define&&define.amd?define([],G):"object"==typeof $?$.freighterApi=G():B.freighterApi=G();const z=(e,t)=>({...e,wallet:"freighter",publicKey:t}),W=(e,t)=>[{...e,publicKey:t},[async e=>{await $.getPublicKey().then((t=>{e(z,t)}))}]],V=(e,t)=>[{...e,publicKey:t},[async e=>{try{await xBullSDK.getPublicKey().then((t=>{e(J,t)}))}catch(e){alert("You need to install the xBull extension")}}]],J=(e,t)=>({...e,wallet:"xbull",publicKey:t});(({node:e,view:r,subscriptions:a,dispatch:c=n,init:d=t})=>{var u,g,f=e&&m(e),y=[],h=e=>{u!==e&&(null==(u=e)&&(c=a=b=n),a&&(y=((e,t=i,n)=>{for(var r,s,o=[],a=0;a<e.length||a<t.length;a++)r=e[a],s=t[a],o.push(s&&!0!==s?!r||s[0]!==r[0]||l(s[1],r[1])?[s[0],s[1],(r&&r[2](),s[0](n,s[1]))]:r:r&&r[2]());return o})(y,a(u),c)),r&&!g&&o(b,g=!0))},b=()=>e=p(e.parentNode,e,f,f=r(u),w,g=!1),w=function(e){c(this.events[e.type],e)};(c=c(((e,t)=>"function"==typeof e?c(e(u,t)):s(e)?"function"==typeof e[0]?c(e[0],e[1]):e.slice(1).map((e=>e&&!0!==e&&e[0](c,e[1])),h(e[0])):h(e))))(d)})({init:{publicKey:"",wallet:""},view:e=>w`<div>
      ${e.wallet?_({wallet:e.wallet,publicKey:e.publicKey}):w`<ul>
            <button onclick=${F}>Connect with Albedo</button>
            <button onclick=${W}>
              Connect with Freighter
            </button>
            <button onclick=${V}>Connect with xBull</button>
          </ul>`}
    </div>`,node:document.getElementById("app")});
//# sourceMappingURL=index.9e88f77c.js.map
