{"mappings":"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","sources":["node_modules/hyperapp/index.js","node_modules/hyperlit/index.js","src/ui/components/pages/wallet.ts","node_modules/@albedo-link/intent/src/random-token-generator.js","node_modules/@albedo-link/intent/src/intent-interface.js","node_modules/@albedo-link/intent/src/intent-errors.js","node_modules/@albedo-link/intent/src/transport-handler.js","node_modules/@albedo-link/intent/package.json","node_modules/@albedo-link/intent/src/transport-builder.js","node_modules/@albedo-link/intent/src/implicit-session.js","node_modules/@albedo-link/intent/src/implicit-session-storage.js","node_modules/@albedo-link/intent/src/intent-dispatcher.js","node_modules/@albedo-link/intent/src/index.js","node_modules/@albedo-link/intent/src/web+stellar-handler.js","src/wallets/albedo/albedo.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/webpack/universalModuleDefinition","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/webpack/bootstrap","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/constants/services.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/constants/stellar.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/constants/errors.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/api/helpers/extensionMessaging.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/getPublicKey.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/api/external.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/signTransaction.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/isConnected.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/getNetwork.ts","node_modules/@stellar/freighter-api/build/webpack:/freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/index.ts","src/wallets/freighter/freighter.ts","src/wallets/xbull/xbull.ts","src/app.tsx"],"sourcesContent":["var SSR_NODE = 1\nvar TEXT_NODE = 3\nvar EMPTY_OBJ = {}\nvar EMPTY_ARR = []\nvar SVG_NS = \"http://www.w3.org/2000/svg\"\n\nvar id = (a) => a\nvar map = EMPTY_ARR.map\nvar isArray = Array.isArray\nvar enqueue =\n  typeof requestAnimationFrame !== \"undefined\"\n    ? requestAnimationFrame\n    : setTimeout\n\nvar createClass = (obj) => {\n  var out = \"\"\n\n  if (typeof obj === \"string\") return obj\n\n  if (isArray(obj)) {\n    for (var k = 0, tmp; k < obj.length; k++) {\n      if ((tmp = createClass(obj[k]))) {\n        out += (out && \" \") + tmp\n      }\n    }\n  } else {\n    for (var k in obj) {\n      if (obj[k]) out += (out && \" \") + k\n    }\n  }\n\n  return out\n}\n\nvar shouldRestart = (a, b) => {\n  for (var k in { ...a, ...b }) {\n    if (typeof (isArray(a[k]) ? a[k][0] : a[k]) === \"function\") {\n      b[k] = a[k]\n    } else if (a[k] !== b[k]) return true\n  }\n}\n\nvar patchSubs = (oldSubs, newSubs = EMPTY_ARR, dispatch) => {\n  for (\n    var subs = [], i = 0, oldSub, newSub;\n    i < oldSubs.length || i < newSubs.length;\n    i++\n  ) {\n    oldSub = oldSubs[i]\n    newSub = newSubs[i]\n\n    subs.push(\n      newSub && newSub !== true\n        ? !oldSub ||\n          newSub[0] !== oldSub[0] ||\n          shouldRestart(newSub[1], oldSub[1])\n          ? [\n              newSub[0],\n              newSub[1],\n              (oldSub && oldSub[2](), newSub[0](dispatch, newSub[1])),\n            ]\n          : oldSub\n        : oldSub && oldSub[2]()\n    )\n  }\n  return subs\n}\n\nvar getKey = (vdom) => (vdom == null ? vdom : vdom.key)\n\nvar patchProperty = (node, key, oldValue, newValue, listener, isSvg) => {\n  if (key === \"key\") {\n  } else if (key === \"style\") {\n    for (var k in { ...oldValue, ...newValue }) {\n      oldValue = newValue == null || newValue[k] == null ? \"\" : newValue[k]\n      if (k[0] === \"-\") {\n        node[key].setProperty(k, oldValue)\n      } else {\n        node[key][k] = oldValue\n      }\n    }\n  } else if (key[0] === \"o\" && key[1] === \"n\") {\n    if (\n      !((node.events || (node.events = {}))[(key = key.slice(2))] = newValue)\n    ) {\n      node.removeEventListener(key, listener)\n    } else if (!oldValue) {\n      node.addEventListener(key, listener)\n    }\n  } else if (!isSvg && key !== \"list\" && key !== \"form\" && key in node) {\n    node[key] = newValue == null ? \"\" : newValue\n  } else if (\n    newValue == null ||\n    newValue === false ||\n    (key === \"class\" && !(newValue = createClass(newValue)))\n  ) {\n    node.removeAttribute(key)\n  } else {\n    node.setAttribute(key, newValue)\n  }\n}\n\nvar createNode = (vdom, listener, isSvg) => {\n  var props = vdom.props\n  var node =\n    vdom.type === TEXT_NODE\n      ? document.createTextNode(vdom.tag)\n      : (isSvg = isSvg || vdom.tag === \"svg\")\n      ? document.createElementNS(SVG_NS, vdom.tag, props.is && props)\n      : document.createElement(vdom.tag, props.is && props)\n\n  for (var k in props) {\n    patchProperty(node, k, null, props[k], listener, isSvg)\n  }\n\n  for (var i = 0; i < vdom.children.length; i++) {\n    node.appendChild(\n      createNode(\n        (vdom.children[i] = maybeVNode(vdom.children[i])),\n        listener,\n        isSvg\n      )\n    )\n  }\n\n  return (vdom.node = node)\n}\n\nvar patch = (parent, node, oldVNode, newVNode, listener, isSvg) => {\n  if (oldVNode === newVNode) {\n  } else if (\n    oldVNode != null &&\n    oldVNode.type === TEXT_NODE &&\n    newVNode.type === TEXT_NODE\n  ) {\n    if (oldVNode.tag !== newVNode.tag) node.nodeValue = newVNode.tag\n  } else if (oldVNode == null || oldVNode.tag !== newVNode.tag) {\n    node = parent.insertBefore(\n      createNode((newVNode = maybeVNode(newVNode)), listener, isSvg),\n      node\n    )\n    if (oldVNode != null) {\n      parent.removeChild(oldVNode.node)\n    }\n  } else {\n    var tmpVKid\n    var oldVKid\n\n    var oldKey\n    var newKey\n\n    var oldProps = oldVNode.props\n    var newProps = newVNode.props\n\n    var oldVKids = oldVNode.children\n    var newVKids = newVNode.children\n\n    var oldHead = 0\n    var newHead = 0\n    var oldTail = oldVKids.length - 1\n    var newTail = newVKids.length - 1\n\n    isSvg = isSvg || newVNode.tag === \"svg\"\n\n    for (var i in { ...oldProps, ...newProps }) {\n      if (\n        (i === \"value\" || i === \"selected\" || i === \"checked\"\n          ? node[i]\n          : oldProps[i]) !== newProps[i]\n      ) {\n        patchProperty(node, i, oldProps[i], newProps[i], listener, isSvg)\n      }\n    }\n\n    while (newHead <= newTail && oldHead <= oldTail) {\n      if (\n        (oldKey = getKey(oldVKids[oldHead])) == null ||\n        oldKey !== getKey(newVKids[newHead])\n      ) {\n        break\n      }\n\n      patch(\n        node,\n        oldVKids[oldHead].node,\n        oldVKids[oldHead],\n        (newVKids[newHead] = maybeVNode(\n          newVKids[newHead++],\n          oldVKids[oldHead++]\n        )),\n        listener,\n        isSvg\n      )\n    }\n\n    while (newHead <= newTail && oldHead <= oldTail) {\n      if (\n        (oldKey = getKey(oldVKids[oldTail])) == null ||\n        oldKey !== getKey(newVKids[newTail])\n      ) {\n        break\n      }\n\n      patch(\n        node,\n        oldVKids[oldTail].node,\n        oldVKids[oldTail],\n        (newVKids[newTail] = maybeVNode(\n          newVKids[newTail--],\n          oldVKids[oldTail--]\n        )),\n        listener,\n        isSvg\n      )\n    }\n\n    if (oldHead > oldTail) {\n      while (newHead <= newTail) {\n        node.insertBefore(\n          createNode(\n            (newVKids[newHead] = maybeVNode(newVKids[newHead++])),\n            listener,\n            isSvg\n          ),\n          (oldVKid = oldVKids[oldHead]) && oldVKid.node\n        )\n      }\n    } else if (newHead > newTail) {\n      while (oldHead <= oldTail) {\n        node.removeChild(oldVKids[oldHead++].node)\n      }\n    } else {\n      for (var keyed = {}, newKeyed = {}, i = oldHead; i <= oldTail; i++) {\n        if ((oldKey = oldVKids[i].key) != null) {\n          keyed[oldKey] = oldVKids[i]\n        }\n      }\n\n      while (newHead <= newTail) {\n        oldKey = getKey((oldVKid = oldVKids[oldHead]))\n        newKey = getKey(\n          (newVKids[newHead] = maybeVNode(newVKids[newHead], oldVKid))\n        )\n\n        if (\n          newKeyed[oldKey] ||\n          (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))\n        ) {\n          if (oldKey == null) {\n            node.removeChild(oldVKid.node)\n          }\n          oldHead++\n          continue\n        }\n\n        if (newKey == null || oldVNode.type === SSR_NODE) {\n          if (oldKey == null) {\n            patch(\n              node,\n              oldVKid && oldVKid.node,\n              oldVKid,\n              newVKids[newHead],\n              listener,\n              isSvg\n            )\n            newHead++\n          }\n          oldHead++\n        } else {\n          if (oldKey === newKey) {\n            patch(\n              node,\n              oldVKid.node,\n              oldVKid,\n              newVKids[newHead],\n              listener,\n              isSvg\n            )\n            newKeyed[newKey] = true\n            oldHead++\n          } else {\n            if ((tmpVKid = keyed[newKey]) != null) {\n              patch(\n                node,\n                node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),\n                tmpVKid,\n                newVKids[newHead],\n                listener,\n                isSvg\n              )\n              newKeyed[newKey] = true\n            } else {\n              patch(\n                node,\n                oldVKid && oldVKid.node,\n                null,\n                newVKids[newHead],\n                listener,\n                isSvg\n              )\n            }\n          }\n          newHead++\n        }\n      }\n\n      while (oldHead <= oldTail) {\n        if (getKey((oldVKid = oldVKids[oldHead++])) == null) {\n          node.removeChild(oldVKid.node)\n        }\n      }\n\n      for (var i in keyed) {\n        if (newKeyed[i] == null) {\n          node.removeChild(keyed[i].node)\n        }\n      }\n    }\n  }\n\n  return (newVNode.node = node)\n}\n\nvar propsChanged = (a, b) => {\n  for (var k in a) if (a[k] !== b[k]) return true\n  for (var k in b) if (a[k] !== b[k]) return true\n}\n\nvar maybeVNode = (newVNode, oldVNode) =>\n  newVNode !== true && newVNode !== false && newVNode\n    ? typeof newVNode.tag === \"function\"\n      ? ((!oldVNode ||\n          oldVNode.memo == null ||\n          propsChanged(oldVNode.memo, newVNode.memo)) &&\n          ((oldVNode = newVNode.tag(newVNode.memo)).memo = newVNode.memo),\n        oldVNode)\n      : newVNode\n    : text(\"\")\n\nvar recycleNode = (node) =>\n  node.nodeType === TEXT_NODE\n    ? text(node.nodeValue, node)\n    : createVNode(\n        node.nodeName.toLowerCase(),\n        EMPTY_OBJ,\n        map.call(node.childNodes, recycleNode),\n        SSR_NODE,\n        node\n      )\n\nvar createVNode = (tag, props, children, type, node) => ({\n  tag,\n  props,\n  key: props.key,\n  children,\n  type,\n  node,\n})\n\nexport var memo = (tag, memo) => ({ tag, memo })\n\nexport var text = (value, node) =>\n  createVNode(value, EMPTY_OBJ, EMPTY_ARR, TEXT_NODE, node)\n\nexport var h = (tag, props, children = EMPTY_ARR) =>\n  createVNode(tag, props, isArray(children) ? children : [children])\n\nexport var app = ({\n  node,\n  view,\n  subscriptions,\n  dispatch = id,\n  init = EMPTY_OBJ,\n}) => {\n  var vdom = node && recycleNode(node)\n  var subs = []\n  var state\n  var busy\n\n  var update = (newState) => {\n    if (state !== newState) {\n      if ((state = newState) == null) dispatch = subscriptions = render = id\n      if (subscriptions) subs = patchSubs(subs, subscriptions(state), dispatch)\n      if (view && !busy) enqueue(render, (busy = true))\n    }\n  }\n\n  var render = () =>\n    (node = patch(\n      node.parentNode,\n      node,\n      vdom,\n      (vdom = view(state)),\n      listener,\n      (busy = false)\n    ))\n\n  var listener = function (event) {\n    dispatch(this.events[event.type], event)\n  }\n\n  return (\n    (dispatch = dispatch((action, props) =>\n      typeof action === \"function\"\n        ? dispatch(action(state, props))\n        : isArray(action)\n        ? typeof action[0] === \"function\"\n          ? dispatch(action[0], action[1])\n          : action\n              .slice(1)\n              .map(\n                (fx) => fx && fx !== true && fx[0](dispatch, fx[1]),\n                update(action[0])\n              )\n        : update(action)\n    ))(init),\n    dispatch\n  )\n}\n","import { h, text } from 'hyperapp'\n\nconst NEXT = 0\nconst TEXT = 1\nconst TAG = 2\nconst CLOSINGTAG = 3\nconst TAGNAME = 4\nconst PROPS = 5\nconst SELFCLOSING = 6\nconst PROPNAME = 7\nconst PROPVAL = 8\nconst PROPVALSTR = 9\n\nconst ws = (c) => c == ' ' || c == '\\t' || c == '\\n' || c == '\\r'\n\nconst parse = (strs, vals) => {\n    let tagname,\n        propname,\n        props,\n        parent,\n        list = [],\n        ch,\n        buffer = '',\n        mode = NEXT,\n        newline = true\n\n    const listpush = (x) => (x || x === 0)  && list.push(typeof x == 'string' ? text(x) : typeof x == 'number' ? text(''+x) : x)\n\n    const pushnode = (ch, children = ch.flat(2)) => {\n        listpush(tagname.call ? tagname(props, children) : h(tagname, props, children))\n        mode = NEXT\n    }\n\n    const gotText = (trim) => {\n        if (trim) buffer = buffer.trimEnd()\n        buffer && listpush(buffer)\n        newline = false\n        buffer = ''\n    }\n\n    const open = () => {\n        parent = [list, tagname, props, parent]\n        list = []\n        mode = NEXT\n    }\n\n    const gotTagName = (m = mode) => {\n        tagname = buffer\n        buffer = ''\n        props = {}\n        mode = m\n    }\n\n    const defaultProp = (m = mode) => {\n        props[buffer] = true\n        mode = m\n        buffer = ''\n    }\n\n    const gotProp = (v) => {\n        props[propname] = v\n        mode = PROPS\n        buffer = ''\n    }\n\n    const close = () => {\n        let children = list\n        ;[list, tagname, props, parent] = parent\n        pushnode(children)\n    }\n\n    for (let j = 0; j < strs.length; j++) {\n        for (let i = 0; i < strs[j].length; i++) {\n            ch = strs[j][i]\n            if (mode == NEXT) {\n                if (ch == '<') {\n                    mode = TAG\n                } else if (!ws(ch)) {\n                    mode = TEXT\n                    buffer = ch\n                } else if (ch =='\\n') {\n                    newline = true\n                } else if (!newline) {\n                    mode = TEXT\n                    buffer = ch\n                }\n            } else if (mode == TEXT) {\n                if (ch == '<') {\n                    mode = TAG\n                } else if (ch == '\\n') {\n                    gotText(false)\n                    newline = true\n                    mode = NEXT\n                } else {\n                    buffer += ch\n                }\n            } else if (mode == TAG) {\n                if (ch == '/') {\n                    mode = CLOSINGTAG\n                    gotText(true)\n                } else {\n                    mode = TAGNAME\n                    gotText(false)\n                    buffer = ch\n                }\n            } else if (mode == CLOSINGTAG) {\n                if (ch == '>') close()\n            } else if (mode == TAGNAME) {\n                if (ws(ch)) {\n                    gotTagName(PROPS)\n                } else if (ch == '/') {\n                    gotTagName(SELFCLOSING)\n                } else if (ch == '>') {\n                    gotTagName()\n                    open()\n                } else {\n                    buffer += ch\n                }\n            } else if (mode == SELFCLOSING) {\n                if (ch == '>') {\n                    pushnode([])\n                }\n            } else if (mode == PROPS) {\n                if (ch == '.') {\n                } else if (ch == '/') {\n                    mode = SELFCLOSING\n                } else if (ch == '>') {\n                    open()\n                } else if (!ws(ch)) {\n                    buffer = ch\n                    mode = PROPNAME\n                }\n            } else if (mode == PROPNAME) {\n                if (ch == '=') {\n                    propname = buffer\n                    mode = PROPVAL\n                } else if (ch == '>') {\n                    defaultProp()\n                    open()\n                } else if (ch == '/') {\n                    defaultProp(SELFCLOSING)\n                } else if (ws(ch)) {\n                    defaultProp(PROPS)\n                } else {\n                    buffer += ch\n                }\n            } else if (mode == PROPVAL) {\n                if (ch == '\"') {\n                    mode = PROPVALSTR\n                    buffer = ''\n                }\n            } else if (mode == PROPVALSTR) {\n                if (ch == '\"') {\n                    gotProp(buffer)\n                } else {\n                    buffer += ch\n                }\n            }\n        }\n        if (mode == TAG) {\n            tagname = vals[j]\n            props = {}\n            mode = PROPS\n        } else if (mode == TEXT) {\n            gotText(!vals[j])\n            listpush(vals[j])\n        } else if (mode == PROPS) {\n            props = { ...props, ...vals[j] }\n        } else if (mode == PROPVAL) {\n            gotProp(vals[j])\n        } else if (mode == PROPVALSTR) {\n            buffer += vals[j]\n        } else if (mode == NEXT && vals[j] != null) {\n            listpush(vals[j])\n        }\n    }\n    list = list.flat(2)\n    return list.length > 1 ? list : list[0]\n}\n\nexport default (strs, ...vals) => parse(strs, vals)\n","import html from \"hyperlit\";\n\nconst walletPage = (props: { wallet: string; publicKey: string }) =>\n  html`<div>${props.wallet} publicKey: ${props.publicKey}</div>`;\n\nexport default walletPage;\n","export function generateRandomToken() {\r\n    const rn = new Uint32Array(4)\r\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n        crypto.getRandomValues(rn)\r\n    } else {\r\n        for (let i = 0; i < rn.length; i++) {\r\n            rn[i] = Math.floor(Math.random() * 4294967295)\r\n        }\r\n    }\r\n    return Array.from(rn).map(n => n.toString(36)).join('')\r\n}","const intentInterface = {\r\n    public_key: {\r\n        risk: 'low',\r\n        title: 'View public key',\r\n        description: 'Requests account public key. It\\'s a simple way of authentication for Stellar-based applications. The response ensures that a user owns the corresponding secret key.',\r\n        unsafe: false,\r\n        implicitFlow: false,\r\n        params: {\r\n            token: {\r\n                description: 'Verification token generated by the application (should be unique or random).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST a signed token and public key.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            require_existing:{\r\n                description: 'Allow existing Albedo accounts only.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            signed_message: {\r\n                description: 'HEX-encoded authentication message derived from the public key and verification token.',\r\n                type: 'string'\r\n            },\r\n            signature: {\r\n                description: 'HEX-encoded ED25519 signature of the authentication message that can be further used to verify user\\'s keypair ownership.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    },\r\n    sign_message: {\r\n        risk: 'medium',\r\n        title: 'Sign text message',\r\n        description: 'Requests arbitrary message signing. Can be used to implement identity/ownership verification.',\r\n        unsafe: false,\r\n        implicitFlow: true,\r\n        params: {\r\n            message: {\r\n                description: 'Text message to sign.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST a signed message.',\r\n                type: 'string',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            original_message: {\r\n                description: 'Text message to sign from request.',\r\n                type: 'string'\r\n            },\r\n            signed_message: {\r\n                description: 'HEX-encoded message derived from the public key and original message.',\r\n                type: 'string'\r\n            },\r\n            message_signature: {\r\n                description: 'HEX-encoded ED25519 signature of the signed message.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    },\r\n    tx: {\r\n        risk: 'high',\r\n        title: 'Sign transaction',\r\n        description: 'Requests a signature for the transaction. Returns the signed transaction envelope that can be submitted to the network or used for multi-sig coordination.',\r\n        unsafe: true,\r\n        implicitFlow: true,\r\n        params: {\r\n            xdr: {\r\n                description: 'XDR-encoded transaction envelope to sign.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            xdr: {\r\n                description: 'XDR-encoded transaction envelope from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    pay: {\r\n        risk: 'high',\r\n        title: 'Make payment',\r\n        description: 'Requests a payment from a user. Works with any Stellar asset, supports transaction memo.',\r\n        unsafe: false,\r\n        implicitFlow: true,\r\n        params: {\r\n            amount: {\r\n                description: 'Requested payment amount.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            destination: {\r\n                description: 'Payment destination address.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            asset_code: {\r\n                description: 'Asset code (skip for XLM).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            asset_issuer: {\r\n                description: 'Asset issuer (skip for XLM).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo (required for exchanges and some anchors).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier (\"public\" or \"testnet\").',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            amount: {\r\n                description: 'Payment amount from request.',\r\n                type: 'string'\r\n            },\r\n            destination: {\r\n                description: 'Payment destination address from request.',\r\n                type: 'string'\r\n            },\r\n            asset_code: {\r\n                description: 'Asset code from request.',\r\n                type: 'string'\r\n            },\r\n            asset_issuer: {\r\n                description: 'Asset issuer from request.',\r\n                type: 'string'\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo from request.',\r\n                type: 'string'\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    trust: {\r\n        risk: 'low',\r\n        title: 'Establish trustline',\r\n        description: 'Requests permission to create a trustline to a given Stellar asset. Gradually simplifies the process of creating trustlines for anchors, ICOs, and airdrops.',\r\n        unsafe: false,\r\n        implicitFlow: true,\r\n        params: {\r\n            asset_code: {\r\n                description: 'Trustline asset code.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            asset_issuer: {\r\n                description: 'Trustline asset issuer address.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            limit: {\r\n                description: 'Trust limit.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo (required for exchanges and some anchors).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier (\"public\" or \"testnet\").',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            asset_code: {\r\n                description: 'Trustline asset code from request.',\r\n                type: 'string'\r\n            },\r\n            asset_issuer: {\r\n                description: 'Trustline asset issuer address from request.',\r\n                type: 'string'\r\n            },\r\n            limit: {\r\n                description: 'Trust limit from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    exchange: {\r\n        risk: 'high',\r\n        title: 'Purchase tokens',\r\n        description: 'Requests permission to buy tokens on Stellar DEX at market price.',\r\n        unsafe: true,\r\n        implicitFlow: false,\r\n        params: {\r\n            amount: {\r\n                description: 'The amount of asset to buy.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            max_price: {\r\n                description: 'Maximum price the user willing to pay.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            sell_asset_code: {\r\n                description: 'Asset code of the asset to sell.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            sell_asset_issuer: {\r\n                description: 'Issuer account of the asset to sell.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            buy_asset_code: {\r\n                description: 'Asset code of the asset to buy.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            buy_asset_issuer: {\r\n                description: 'Issuer account of the asset to buy.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo (required for exchanges and some anchors).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier (\"public\" or \"testnet\").',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            amount: {\r\n                description: 'The amount of asset to buy from request.',\r\n                type: 'string'\r\n            },\r\n            max_price: {\r\n                description: 'Maximum price the user willing to pay from request.',\r\n                type: 'string'\r\n            },\r\n            sell_asset_code: {\r\n                description: 'Asset code of the asset to sell from request.',\r\n                type: 'string'\r\n            },\r\n            sell_asset_issuer: {\r\n                description: 'Issuer account of the asset to sell from request.',\r\n                type: 'string'\r\n            },\r\n            buy_asset_code: {\r\n                description: 'Asset code of the asset to buy from request.',\r\n                type: 'string'\r\n            },\r\n            buy_asset_issuer: {\r\n                description: 'Issuer account of the asset to buy from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    implicit_flow: {\r\n        risk: 'high',\r\n        title: 'Implicit permissions',\r\n        description: 'Requests temporary access token for one or more intents that can be used to execute actions without explicit confirmation from the user. In order to be executed implicitly, an implicit flow permissions for a given intent should be granted and \"pubkey\" parameter set.',\r\n        unsafe: true,\r\n        implicitFlow: false,\r\n        params: {\r\n            intents: {\r\n                description: 'Requested implicit flow intents.',\r\n                type: 'string|string[]',\r\n                required: true\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier (\"public\" or \"testnet\").',\r\n                type: 'string',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            granted: {\r\n                description: 'Whether a user granted permissions or not.',\r\n                type: 'boolean'\r\n            },\r\n            intents: {\r\n                description: 'Requested implicit flow intents.',\r\n                type: 'string[]'\r\n            },\r\n            grants: {\r\n                description: 'Implicit flow intents that have been granted.',\r\n                type: 'string[]'\r\n            },\r\n            session: {\r\n                description: 'Unique implicit session id.',\r\n                type: 'string'\r\n            },\r\n            valid_until: {\r\n                description: 'Session expiration timestamp.',\r\n                type: 'number'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    },\r\n    manage_account: {\r\n        risk: 'low',\r\n        title: 'Open account settings',\r\n        description: 'Opens account settings window for a given account.',\r\n        unsafe: false,\r\n        implicitFlow: false,\r\n        params: {\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier (\"public\" or \"testnet\").',\r\n                type: 'string',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            pubkey: {\r\n                description: 'Public key from intent request.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default intentInterface\r\n","const intentErrors = {\r\n    unhandledError: {\r\n        message: 'Unhandled error occurred. If this error persists, please contact Albedo support.',\r\n        code: -1\r\n    },\r\n    externalError: {\r\n        message: 'External error occurred.',\r\n        code: -2\r\n    },\r\n    invalidIntentRequest: {\r\n        message: 'Intent request is invalid.',\r\n        code: -3\r\n    },\r\n    actionRejectedByUser: {\r\n        message: 'Action request was rejected by the user.',\r\n        code: -4\r\n    },\r\n    horizonError: {\r\n        message: 'Transaction failed when submitted to Stellar network.',\r\n        code: -5\r\n    },\r\n    callbackError: {\r\n        message: 'Callback redirect failed.',\r\n        code: -6\r\n    }\r\n}\r\n\r\nexport default intentErrors","import {generateRandomToken} from './random-token-generator'\r\nimport intentErrors from './intent-errors'\r\nimport pkgInfo from '../package.json'\r\n\r\n/**\r\n * Create transport handler for a given window|iframe and establish communication channel.\r\n * @param {Window} targetWindow - Transport window|iframe reference.\r\n * @param {Boolean} ephemeral - If set to true, automatically closes the window opened after receiving the response.\r\n */\r\nfunction TransportHandler(targetWindow, ephemeral = false) {\r\n    this.windowHandler = targetWindow\r\n    this.ephemeral = !!ephemeral\r\n    this.isLoaded = false\r\n    this.pendingRequests = {}\r\n    this.preprocessRequestParams = null\r\n    this.onLoaded = new Promise((resolve, reject) => this.onLoadedCallback = resolve).then(() => this)\r\n    this.messageHandler = this.messageHandler.bind(this)\r\n    window.addEventListener('message', this.messageHandler, false)\r\n}\r\n\r\nTransportHandler.prototype = {\r\n    isLoaded: false,\r\n\r\n    markLoaded() {\r\n        const {onLoadedCallback} = this\r\n        if (onLoadedCallback) {\r\n            this.onLoadedCallback = null\r\n            this.isLoaded = true\r\n            onLoadedCallback()\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Handler for incoming communication messages processing.\r\n     * @param {Object} data - Received data.\r\n     */\r\n    messageHandler({data}) {\r\n        if (data.albedo) {\r\n            const {version} = data.albedo\r\n            //TODO: check version compatibility\r\n            return this.markLoaded()\r\n        }\r\n        if (data.albedoIntentResult) {\r\n            const {__reqid, ...result} = data.albedoIntentResult,\r\n                pending = this.pendingRequests[__reqid]\r\n            if (pending) {\r\n                delete this.pendingRequests[__reqid]\r\n                pending(result.error, result)\r\n                if (this.ephemeral) {\r\n                    window.removeEventListener('message', this.messageHandler, false)\r\n                    this.windowHandler.close()\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Handler for the transport window close event.\r\n     */\r\n    transportCloseHandler() {\r\n        for (let key in this.pendingRequests)\r\n            if (this.pendingRequests.hasOwnProperty(key)) {\r\n                const pending = this.pendingRequests[key]\r\n                delete this.pendingRequests[key]\r\n                pending(intentErrors.actionRejectedByUser)\r\n            }\r\n    },\r\n\r\n    /**\r\n     * Request intent confirmation using current transport.\r\n     * @param {Object} params - Intent request params.\r\n     * @return {Promise}\r\n     */\r\n    postMessage(params) {\r\n        const nonce = generateRandomToken()\r\n        return new Promise((resolve, reject) => {\r\n            this.onLoaded.then(() => {\r\n                this.pendingRequests[nonce] = (err, data) => err ? reject(err) : resolve(data)\r\n                params = Object.assign({__reqid: nonce, __albedo_intent_version: pkgInfo.version}, params)\r\n                if (this.preprocessRequestParams) {\r\n                    params = this.preprocessRequestParams(params)\r\n                }\r\n                this.windowHandler.postMessage(params, '*')\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default TransportHandler\r\n","{\r\n  \"name\": \"@albedo-link/intent\",\r\n  \"version\": \"0.11.2\",\r\n  \"description\": \"A lightweight browser wrapper for Albedo API that provides a promise-based interface for all supported intents.\",\r\n  \"author\": \"StellarExpertTeam<info@stellar.expert>\",\r\n  \"license\": \"MIT\",\r\n  \"homepage\": \"https://github.com/stellar-expert/albedo\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/stellar-expert/albedo/issues\",\r\n    \"email\": \"info@stellar.expert\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/stellar-expert/albedo.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"webpack --mode=production --config ./webpack.config.js\",\r\n    \"postbuild\": \"node build/generate-docs.js\",\r\n    \"test\": \"mocha\"\r\n  },\r\n  \"main\": \"./lib/albedo.intent.js\",\r\n  \"module\": \"./src/index.js\",\r\n  \"types\": \"./src/index.d.ts\",\r\n  \"keywords\": [\r\n    \"albedo\",\r\n    \"stellar\",\r\n    \"SSO\",\r\n    \"signer\",\r\n    \"intent\",\r\n    \"multi-sig\"\r\n  ],\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.14.5\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.14.5\",\r\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.14.5\",\r\n    \"@babel/preset-env\": \"^7.14.5\",\r\n    \"@babel/register\": \"^7.14.5\",\r\n    \"babel-loader\": \"^8.2.2\",\r\n    \"chai\": \"^4.3.4\",\r\n    \"mocha\": \"^9.0.0\",\r\n    \"sinon\": \"^11.1.1\",\r\n    \"terser-webpack-plugin\": \"^5.1.3\",\r\n    \"webpack\": \"^5.38.1\",\r\n    \"webpack-cli\": \"^4.7.2\"\r\n  },\r\n  \"mocha\": {\r\n    \"recursive\": true,\r\n    \"require\": [\r\n      \"@babel/register\",\r\n      \"./test/test-helper.js\"\r\n    ],\r\n    \"ui\": \"bdd\"\r\n  }\r\n}\r\n","import TransportHandler from './transport-handler'\r\n\r\n/**\r\n * Create explicit dialog window transport.\r\n * @param {String} frontendUrl - URL of the Albedo frontend.\r\n * @return {TransportHandler}\r\n */\r\nfunction createDialogTransport(frontendUrl) {\r\n    const url = `${frontendUrl}/confirm`,\r\n        w = 440,\r\n        h = 600,\r\n        // Fixes dual-screen position                         Most browsers      Firefox\r\n        dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX,\r\n        dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY,\r\n        currentWindowWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width,\r\n        currentWindowHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height,\r\n        left = ((currentWindowWidth / 2) - (w / 2)) + dualScreenLeft,\r\n        top = ((currentWindowHeight / 2) - (h / 2)) + dualScreenTop\r\n\r\n    const dialogWindow = window.open(url, 'auth.albedo.link', `height=${h},width=${w},top=${top},left=${left},menubar=0,toolbar=0,location=0,status=0,personalbar=0,scrollbars=0,dependent=1`)\r\n    return new TransportHandler(dialogWindow, true).onLoaded\r\n}\r\n\r\nlet sharedIframeTransport = null\r\n\r\n/**\r\n * Create implicit transport based on hidden iframe.\r\n * @param {String} frontendUrl - URL of the Albedo frontend.\r\n * @return {TransportHandler}\r\n */\r\nfunction createIframeTransport(frontendUrl) {\r\n    //check if already initialized\r\n    if (!sharedIframeTransport) {\r\n        const iframe = document.createElement('iframe')\r\n        iframe.style.border = 'none'\r\n        Object.assign(iframe, {\r\n            width: '0',\r\n            height: '0',\r\n            frameBorder: '0',\r\n            referrerPolicy: 'origin',\r\n            src: `${frontendUrl}`\r\n        })\r\n        document.body.appendChild(iframe)\r\n        sharedIframeTransport = new TransportHandler(iframe.contentWindow)\r\n    }\r\n    return sharedIframeTransport.onLoaded\r\n}\r\n\r\nexport {createDialogTransport, createIframeTransport}","function ImplicitSession({session, pubkey, grants, valid_until}) {\r\n    this.key = session\r\n    this.pubkey = pubkey\r\n    this.grants = grants.slice()\r\n    this.validUntil = valid_until\r\n    //prevent accidental changes\r\n    Object.freeze(this)\r\n    Object.freeze(this.grants)\r\n}\r\n\r\nImplicitSession.prototype = {\r\n    /**\r\n     * Unique session key.\r\n     * @type {String}\r\n     */\r\n    key: '',\r\n\r\n    /**\r\n     * Public key of the key pair used to authorize the session.\r\n     * @type {String}\r\n     */\r\n    pubkey: '',\r\n\r\n    /**\r\n     * Granted permissions.\r\n     * @type {Array<String>}\r\n     */\r\n    grants: [],\r\n\r\n    /**\r\n     * Time-to-live.\r\n     * @type {Number}\r\n     */\r\n    validUntil: 0,\r\n\r\n    /**\r\n     * Check whether the session is expired or not.\r\n     * @return {boolean}\r\n     */\r\n    get isExpired() {\r\n        //2 seconds reserve\r\n        return this.validUntil - 2000 < new Date().getTime()\r\n    },\r\n\r\n    toJSON() {\r\n        return {\r\n            session: this.key,\r\n            pubkey: this.pubkey,\r\n            grants: this.grants.slice(),\r\n            valid_until: this.validUntil\r\n        }\r\n    }\r\n}\r\n\r\nexport default ImplicitSession","import ImplicitSession from './implicit-session'\r\n\r\nconst storagePrefix = 'albedo_session_',\r\n    implicitSessions = {}\r\n\r\nfunction getStorage() {\r\n    return window.sessionStorage\r\n}\r\n\r\n/**\r\n * Whether to save the session to the browser internal session storage - allows sharing of session data\r\n * between multiple browser tabs but potentially is less secure than the local variable storage.\r\n * @type {boolean}\r\n */\r\nconst saveToBrowserStorage = true\r\n\r\nexport function saveImplicitSession(intentResult) {\r\n    const session = new ImplicitSession(intentResult)\r\n    if (!saveToBrowserStorage) {\r\n        implicitSessions[session.pubkey] = session\r\n    } else {\r\n        getStorage().setItem(storagePrefix + session.pubkey, JSON.stringify(session))\r\n    }\r\n}\r\n\r\nfunction retrieveSessionFromStorage(pubkey) {\r\n    let session\r\n    if (!saveToBrowserStorage) {\r\n        session = implicitSessions[pubkey]\r\n    } else {\r\n        const restored = getStorage().getItem(storagePrefix + pubkey)\r\n        if (restored) {\r\n            session = new ImplicitSession(JSON.parse(restored))\r\n        }\r\n    }\r\n    if (!session) return null\r\n    if (session.isExpired) {\r\n        forgetSession(pubkey)\r\n        return null\r\n    }\r\n    return session\r\n}\r\n\r\n/**\r\n * Find active implicit session by intent and pubkey.\r\n * @param {String} intent - Intent code.\r\n * @param {String} pubkey - Public key associated with the session.\r\n * @return {ImplicitSession|null}\r\n */\r\nexport function getImplicitSession(intent, pubkey) {\r\n    const session = retrieveSessionFromStorage(pubkey)\r\n    if (!session || !session.grants.includes(intent)) return null\r\n    return session\r\n}\r\n\r\n/**\r\n * Retrieve all active sessions.\r\n * @return {Array<ImplicitSession>}\r\n */\r\nexport function getAllImplicitSessions() {\r\n    const storage = getStorage()\r\n    return Object.keys(storage)\r\n        .filter(key => key.indexOf(storagePrefix) === 0)\r\n        .map(key => retrieveSessionFromStorage(key.substr(storagePrefix.length)))\r\n        .filter(session => !!session)\r\n}\r\n\r\n/**\r\n * Remove an explicit session handler from the storage.\r\n * @param {String} pubkey - Public key associated with the session.\r\n */\r\nexport function forgetSession(pubkey) {\r\n    if (!saveToBrowserStorage) {\r\n        delete implicitSessions[pubkey]\r\n    } else {\r\n        getStorage().removeItem(storagePrefix + pubkey)\r\n    }\r\n}","import intentInterface from './intent-interface'\r\nimport intentErrors from './intent-errors'\r\nimport {createDialogTransport, createIframeTransport} from './transport-builder'\r\nimport {getImplicitSession, saveImplicitSession} from './implicit-session-storage'\r\n\r\nfunction intentError(msg) {\r\n    return Object.assign(new Error(), intentErrors.invalidIntentRequest, {ext: msg})\r\n}\r\n\r\n/**\r\n * Request user's confirmation for the specified action.\r\n * @param {Object} params - Intent parameters.\r\n * @param {String} frontendUrl - URL of the Albedo frontend.\r\n * @return {Promise}\r\n */\r\nexport function requestIntentConfirmation(params, frontendUrl) {\r\n    try {\r\n        const {intent} = params\r\n        //intent should be present\r\n        if (!intent)\r\n            throw intentError('Parameter \"intent\" is required.')\r\n        const intentDescriptor = intentInterface[intent]\r\n        //check interface compliance\r\n        if (!intentDescriptor)\r\n            throw intentError(`Unknown intent: \"${intent}\".`)\r\n        //build request data\r\n        const requestParams = prepareRequestParams(intentDescriptor, params)\r\n        //create transport and dispatch request\r\n        return prepareTransport(requestParams, frontendUrl)\r\n            //dispatch intent request\r\n            .then(transport => sendRequest(requestParams, transport))\r\n    } catch (e) {\r\n        const {code = -1, message, ext} = e,\r\n            res = {message, code}\r\n        if (ext) {\r\n            res.ext = ext\r\n        }\r\n        return Promise.reject(res)\r\n    }\r\n}\r\n\r\n/**\r\n * Create/retrieve an appropriate window transport for given intent params.\r\n * @param {Object} params - Intent params provided by the third-party app.\r\n * @param {String} frontendUrl - URL of the Albedo website.\r\n * @return {TransportHandler}\r\n */\r\nfunction prepareTransport(params, frontendUrl) {\r\n    //check if intent supports implicit flow and the permission was granted to the app\r\n    if (params.pubkey) {\r\n        const session = getImplicitSession(params.intent, params.pubkey)\r\n        if (session) {\r\n            params.session = session.key\r\n            //implicit session can be executed without a dialog window\r\n            return createIframeTransport(frontendUrl)\r\n        }\r\n    }\r\n    //create iframe transport in advance if the implicit flow has been requested\r\n    setTimeout(() => {\r\n        if (params.intent === 'implicit_flow') {\r\n            createIframeTransport(frontendUrl)\r\n        }\r\n    }, 200)\r\n    //create dialog window transport if only interactive authorization flow is available\r\n    return createDialogTransport(frontendUrl)\r\n}\r\n\r\n/**\r\n * Send confirmation request for a specific intent using a suitable transport.\r\n * @param {Object} params - Intent params provided by the third-party app.\r\n * @param {TransportHandler} transport - PostMessage transport window handler.\r\n * @return {Promise<Object>}\r\n */\r\nfunction sendRequest(params, transport) {\r\n    return transport.postMessage(params)\r\n        .then(result => {\r\n            //handle implicit session grant response if any\r\n            if (result.intent === 'implicit_flow' && result.granted) {\r\n                //save implicit session to the internal session storage\r\n                saveImplicitSession(result)\r\n            }\r\n            return result\r\n        })\r\n}\r\n\r\n/**\r\n * Pre-process request params provided by the third-party app.\r\n * @param {Object} intentDescriptor - Requested intent descriptor - contains the list of available params.\r\n * @param {Object} params - Intent params provided by the third-party app.\r\n * @return {Object}\r\n */\r\nfunction prepareRequestParams(intentDescriptor, params) {\r\n    //validate parameters\r\n    if (typeof params !== 'object')\r\n        throw intentError('Intent parameters expected.')\r\n    const {intent, pubkey} = params,\r\n        requestParams = {intent}\r\n    //basic account public key validation\r\n    if (pubkey && !/^G[0-9A-Z]{55}$/.test(pubkey))\r\n        throw intentError('Invalid \"pubkey\" parameter. Stellar account public key expected.')\r\n    //check required params\r\n    for (const key in intentDescriptor.params) {\r\n        const props = intentDescriptor.params[key],\r\n            value = params[key]\r\n        if (value) {\r\n            requestParams[key] = value\r\n        } else if (props.required) {\r\n            throw intentError(`Parameter \"${key}\" is required for intent \"${intent}\".`)\r\n        }\r\n    }\r\n    return requestParams\r\n}","import {generateRandomToken} from './random-token-generator'\r\nimport intentInterface from './intent-interface'\r\nimport intentErrors from './intent-errors'\r\nimport {requestIntentConfirmation} from './intent-dispatcher'\r\nimport {forgetSession, getAllImplicitSessions, getImplicitSession} from './implicit-session-storage'\r\nimport {bindWebStellarLinkHandler} from './web+stellar-handler'\r\n\r\nif (typeof window === 'object' && typeof window.fetch !== 'function') {\r\n    throw new Error('Browser FetchAPI is not available. For legacy browsers support use polyfills such as whatwg-fetch.')\r\n}\r\n\r\n/**\r\n * Albedo API external interface implementation.\r\n */\r\nfunction AlbedoIntent() {\r\n}\r\n\r\nAlbedoIntent.prototype = {\r\n    frontendUrl: 'https://albedo.link',\r\n    intentInterface,\r\n    intentErrors,\r\n    /**\r\n     * Initiate external intent request.\r\n     * @param {String} intent - Intent name.\r\n     * @param {Object} [params] - Request parameters.\r\n     * @returns {Promise<Object>}\r\n     */\r\n    request(intent, params) {\r\n        return requestIntentConfirmation(Object.assign(params || {}, {intent}), this.frontendUrl)\r\n    },\r\n\r\n    /**\r\n     * Requests temporary permissions to execute the specific intents without calling confirmation dialog.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {Array<String>} params.intents - Requested intents.\r\n     * @returns {Promise<ImplicitFlowIntentResult>}\r\n     */\r\n    implicitFlow(params) {\r\n        return this.request('implicit_flow', params)\r\n    },\r\n\r\n    /**\r\n     * Request secure third-party application authentication.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} [params.token] - Verification token generated by the application (should be unique or random).\r\n     * @param {String} [params.require_existing] - Allow existing Albedo accounts only.\r\n     * @returns {Promise<PublicKeyIntentResult>}\r\n     */\r\n    publicKey(params) {\r\n        params = Object.assign({}, params)\r\n        if (!params.token) {\r\n            params.token = generateRandomToken()\r\n        }\r\n        return this.request('public_key', params)\r\n    },\r\n\r\n    /**\r\n     * Request transaction signing, returns the signed transaction envelope.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.xdr - A Stellar transaction in XDR format encoded in base64.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar account network identifier or private network passphrase.\r\n     * @param {Boolean} [params.submit] - If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.\r\n     * @returns {Promise<TxIntentResult>}\r\n     */\r\n    tx(params) {\r\n        //TODO: check if txXdr is a Transaction instance and serialize it\r\n        return this.request('tx', params)\r\n    },\r\n\r\n    /**\r\n     * Request an asset trustline creation.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.destination - Payment destination address.\r\n     * @param {String} params.amount - Amount to pay.\r\n     * @param {String} [params.asset_code] - [Optional] Asset code (if not set XLM is implied).\r\n     * @param {String} [params.asset_issuer] - [Optional] Asset issuer (if not set XLM is implied).\r\n     * @param {String} [params.memo] - [Optional] Memo to be included in the payment.\r\n     * @param {('MEMO_TEXT' | 'MEMO_ID' | 'MEMO_HASH' | 'MEMO_RETURN')} [params.memo_type] - [Optional] Memo type to be included in the payment.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar account network identifier or private network passphrase.\r\n     * @param {Boolean} [params.submit] - If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.\r\n     * @returns {Promise<PayIntentResult>}\r\n     */\r\n    pay(params) {\r\n        return this.request('pay', params)\r\n    },\r\n\r\n    /**\r\n     * Request an asset trustline creation.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.asset_code - Asset code.\r\n     * @param {String} params.asset_issuer - Asset account issuer.\r\n     * @param {String} [params.limit] - [Optional] Trustline limit.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar account network identifier or private network passphrase.\r\n     * @param {Boolean} [params.submit] - If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.\r\n     * @returns {Promise<TrustIntentResult>}\r\n     */\r\n    trust(params) {\r\n        return this.request('trust', params)\r\n    },\r\n\r\n    /**\r\n     * Request token exchange on Stellar DEX.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.destination - Payment destination address.\r\n     * @param {String} params.amount - Amount to pay.\r\n     * @param {String} params.max_price - Maximum price to pay.\r\n     * @param {String} [params.sell_asset_code] - [Optional] Selling asset code (if not set XLM is implied).\r\n     * @param {String} [params.sell_asset_issuer] - [Optional] Selling asset issuer (if not set XLM is implied).\r\n     * @param {String} [params.buy_asset_code] - [Optional] Selling asset code (if not set XLM is implied).\r\n     * @param {String} [params.buy_asset_issuer] - [Optional] Selling asset issuer (if not set XLM is implied).\r\n     * @return {Promise<ExchangeIntentResult>}\r\n     */\r\n    exchange(params) {\r\n        return this.request('exchange', params)\r\n    },\r\n\r\n    /**\r\n     * Request arbitrary data signing.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.message - Text message to sign.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @returns {Promise<SignMessageIntentResult>}\r\n     */\r\n    signMessage(params) {\r\n        params = Object.assign({}, params, {message: normalizeMessageToSign(params.message)})\r\n        return this.request('sign_message', params)\r\n    },\r\n\r\n    /**\r\n     * Open account settings window for a given account.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.pubkey - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar account network identifier or private network passphrase.\r\n     * @returns {Promise<ManageAccountIntentResult>}\r\n     */\r\n    manageAccount(params) {\r\n        return this.request('manage_account', params)\r\n    },\r\n\r\n    generateRandomToken() {\r\n        return generateRandomToken()\r\n    },\r\n\r\n    /**\r\n     * Check whether an implicit session exists for a given intent and pubkey.\r\n     * @param {String} intent\r\n     * @param {String} pubkey\r\n     * @return {boolean}\r\n     */\r\n    isImplicitSessionAllowed(intent, pubkey) {\r\n        return !!getImplicitSession(intent, pubkey)\r\n    },\r\n\r\n    /**\r\n     * Enumerate all currently active implicit sessions.\r\n     * @returns {Array<{pubkey: String, session: String, valid_until: Number, grants: Array<String>}>}\r\n     */\r\n    listImplicitSessions() {\r\n        return getAllImplicitSessions()\r\n    },\r\n\r\n    /**\r\n     * Revoke session permission granted for an account.\r\n     * @param {String} pubkey\r\n     */\r\n    forgetImplicitSession(pubkey){\r\n        forgetSession(pubkey)\r\n    }\r\n}\r\n\r\n/**\r\n * Normalize a message before sending it to the signing endpoint.\r\n * @param {String} message - Message to normalize.\r\n * @returns {String}\r\n */\r\nfunction normalizeMessageToSign(message) {\r\n    switch (typeof message) {\r\n        case 'string':\r\n            return message\r\n        case 'undefined':\r\n            return ''\r\n    }\r\n    return JSON.stringify(message)\r\n}\r\n\r\nconst albedo = new AlbedoIntent()\r\nalbedo.default = albedo\r\n\r\nbindWebStellarLinkHandler(albedo)\r\n\r\nexport {intentInterface, intentErrors}\r\nexport default albedo","function parseQuery(query = null) {\r\n    if (query === null) {\r\n        query = window.location.search\r\n    }\r\n    if (query[0] === '?') query = query.substr(1)\r\n    const dest = {}\r\n    for (let kv of query.split('&')) {\r\n        const [key, value] = kv.split('=').map(v => decodeURIComponent(v))\r\n        dest[key] = value\r\n    }\r\n    return dest\r\n}\r\n\r\nexport function bindWebStellarLinkHandler(albedoIntent) {\r\n    if (typeof (document) === 'undefined' || !document.addEventListener) return\r\n    document.addEventListener('click', function sep0007Handler(e) {\r\n        //we are only interested in links with \"web+stellar\" protocol\r\n        if (e.target.tagName !== 'A' || (e.target.href || '').indexOf('web+stellar:') !== 0) return\r\n        e.preventDefault()\r\n        e.stopImmediatePropagation()\r\n        const {pathname: intentName, search} = new URL(e.target.href)\r\n        if (!['tx', 'pay'].includes(intentName)) {\r\n            alert(`Invalid operation requested: ${intentName}. It's likely an external application error. Please contact support team of ${window.location.origin}.`)\r\n            return\r\n        }\r\n\r\n        const params = parseQuery(search)\r\n        albedoIntent.request(intentName, params)\r\n    }, false)\r\n}\r\n","import albedo from \"@albedo-link/intent\";\nimport IState from \"../../ui/state/state\";\n\nconst GotPublicKey = (state: IState, res: any) => ({\n  ...state,\n  wallet: \"albedo\",\n  publicKey: res.pubkey,\n});\n\nexport const getPublicKey = (state: IState, publicKey: string) => [\n  { ...state, publicKey },\n\n  [\n    async (dispatch: Function) => {\n      await albedo.publicKey({}).then((res) => {\n        dispatch(GotPublicKey, res);\n      });\n    },\n  ],\n];\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"freighterApi\"] = factory();\n\telse\n\t\troot[\"freighterApi\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export enum SERVICE_TYPES {\n  CREATE_ACCOUNT = \"CREATE_ACCOUNT\",\n  FUND_ACCOUNT = \"FUND_ACCOUNT\",\n  ADD_ACCOUNT = \"ADD_ACCOUNT\",\n  IMPORT_ACCOUNT = \"IMPORT_ACCOUNT\",\n  LOAD_ACCOUNT = \"LOAD_ACCOUNT\",\n  MAKE_ACCOUNT_ACTIVE = \"MAKE_ACCOUNT_ACTIVE\",\n  UPDATE_ACCOUNT_NAME = \"UPDATE_ACCOUNT_NAME\",\n  GET_MNEMONIC_PHRASE = \"GET_MNEMONIC_PHRASE\",\n  CONFIRM_MNEMONIC_PHRASE = \"CONFIRM_MNEMONIC_PHRASE\",\n  RECOVER_ACCOUNT = \"RECOVER_ACCOUNT\",\n  CONFIRM_PASSWORD = \"CONFIRM_PASSWORD\",\n  REJECT_ACCESS = \"REJECT_ACCESS\",\n  GRANT_ACCESS = \"GRANT_ACCESS\",\n  SIGN_TRANSACTION = \"SIGN_TRANSACTION\",\n  REJECT_TRANSACTION = \"REJECT_TRANSACTION\",\n  SIGN_OUT = \"SIGN_OUT\",\n  SHOW_BACKUP_PHRASE = \"SHOW_BACKUP_PHRASE\",\n  SAVE_SETTINGS = \"SAVE_SETTINGS\",\n  LOAD_SETTINGS = \"LOAD_SETTINGS\",\n  GET_CACHED_ASSET_ICON = \"GET_CACHED_ASSET_ICON\",\n  CACHE_ASSET_ICON = \"CACHE_ASSET_ICON\",\n}\n\nexport enum EXTERNAL_SERVICE_TYPES {\n  REQUEST_ACCESS = \"REQUEST_ACCESS\",\n  SUBMIT_TRANSACTION = \"SUBMIT_TRANSACTION\",\n  REQUEST_NETWORK = \"REQUEST_NETWORK\",\n}\n\nexport const EXTERNAL_MSG_REQUEST = \"FREIGHTER_EXTERNAL_MSG_REQUEST\";\nexport const EXTERNAL_MSG_RESPONSE = \"FREIGHTER_EXTERNAL_MSG_RESPONSE\";\n\ndeclare const DEV_SERVER: string;\nconst _DEV_SERVER = DEV_SERVER;\nexport { _DEV_SERVER as DEV_SERVER };\n","export enum NETWORK_NAMES {\n  TESTNET = \"Test network\",\n  PUBNET = \"Public network\",\n}\n\nexport enum NETWORKS {\n  PUBLIC = \"PUBLIC\",\n  TESTNET = \"TESTNET\",\n}\n","export class NoExtensionInstalledError extends Error {\n  message = \"Freighter does not appear to be installed.\";\n}\n","import { browser } from \"webextension-polyfill-ts\";\nimport {\n  DEV_SERVER,\n  EXTERNAL_MSG_RESPONSE,\n  EXTERNAL_MSG_REQUEST,\n} from \"../../constants/services\";\nimport { Response } from \"../types\";\nimport { NoExtensionInstalledError } from \"../../constants/errors\";\n\nexport const sendMessageToContentScript = (msg: {}): Promise<Response> => {\n  /* \n    In the case of multiple calls coming in sequentially, we use this MESSAGE_ID to make sure we're responding to\n    the appropriate message sender. Otherwise, we can run into race conditions where we simply resolve all \n    sent messages with the first thing that comes back.\n  */\n  const MESSAGE_ID = Date.now() + Math.random();\n\n  window.postMessage(\n    { source: EXTERNAL_MSG_REQUEST, messageId: MESSAGE_ID, ...msg },\n    window.location.origin,\n  );\n  return new Promise((resolve, reject) => {\n    if (!window.freighter) {\n      reject(new NoExtensionInstalledError());\n    }\n\n    const messageListener = (event: { source: any; data: Response }) => {\n      // We only accept messages from ourselves\n      if (event.source !== window) return;\n      // Only respond to messages tagged as being from our content script\n      if (event?.data?.source !== EXTERNAL_MSG_RESPONSE) return;\n      // Only respond to messages that this instance of sendMessageToContentScript sent\n      if (event?.data?.messagedId !== MESSAGE_ID) return;\n\n      resolve(event.data);\n      window.removeEventListener(\"message\", messageListener);\n    };\n    window.addEventListener(\"message\", messageListener, false);\n  });\n};\n\nexport const sendMessageToBackground = async (msg: {}): Promise<Response> => {\n  let res;\n  if (DEV_SERVER) {\n    // treat this as an external call because we're making the call from the browser, not the popup\n    res = await sendMessageToContentScript(msg);\n  } else {\n    res = await browser.runtime.sendMessage(msg);\n  }\n\n  return res;\n};\n","import { requestPublicKey } from \"@shared/api/external\";\n\nexport const getPublicKey = () => requestPublicKey();\n","import { EXTERNAL_SERVICE_TYPES } from \"../constants/services\";\nimport { NETWORKS } from \"../constants/stellar\";\nimport { sendMessageToContentScript } from \"./helpers/extensionMessaging\";\n\nexport const requestPublicKey = async (): Promise<string> => {\n  let response = { publicKey: \"\", error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_ACCESS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { publicKey, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return publicKey;\n};\n\nexport const submitTransaction = async (\n  transactionXdr: string,\n  network?: string,\n): Promise<string> => {\n  let response = { signedTransaction: \"\", error: \"\" };\n  if (network && network !== NETWORKS.PUBLIC && network !== NETWORKS.TESTNET) {\n    const error = `Network must be ${NETWORKS.PUBLIC} or ${NETWORKS.TESTNET}`;\n    throw error;\n  }\n  try {\n    response = await sendMessageToContentScript({\n      transactionXdr,\n      network,\n      type: EXTERNAL_SERVICE_TYPES.SUBMIT_TRANSACTION,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  const { signedTransaction, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return signedTransaction;\n};\n\nexport const requestNetwork = async (): Promise<string> => {\n  let response = { network: \"\", error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_NETWORK,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { network, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return network;\n};\n","import { submitTransaction } from \"@shared/api/external\";\n\nexport const signTransaction = (\n  transactionXdr: string,\n  network?: \"PUBLIC\" | \"TESTNET\"\n) => submitTransaction(transactionXdr, network);\n","export const isConnected = () => !!window.freighter;\n","import { requestNetwork } from \"@shared/api/external\";\n\nexport const getNetwork = () => requestNetwork();\n","import { getPublicKey } from \"./getPublicKey\";\nimport { signTransaction } from \"./signTransaction\";\nimport { isConnected } from \"./isConnected\";\nimport { getNetwork } from \"./getNetwork\";\n\nexport { getPublicKey, signTransaction, isConnected, getNetwork };\nexport default { getPublicKey, signTransaction, isConnected, getNetwork };\n","import { getPublicKey } from \"@stellar/freighter-api\";\nimport IState from \"../../ui/state/state\";\n\nconst GotPublicKey = (state: IState, res: any) => ({\n  ...state,\n  wallet: \"freighter\",\n  publicKey: res,\n});\n\nexport const getPublicKeyFreighter = (state: IState, publicKey: string) => [\n  { ...state, publicKey },\n\n  [\n    async (dispatch: Function) => {\n      await getPublicKey().then((res) => {\n        dispatch(GotPublicKey, res);\n      });\n    },\n  ],\n];\n","import IState from \"../../ui/state/state\";\n\nexport const getPublicKeyXBull = (state: IState, publicKey: string) => [\n  { ...state, publicKey },\n\n  [\n    async (dispatch: Function) => {\n      try {\n        await xBullSDK.getPublicKey().then((res: any) => {\n          dispatch(GotPublicKey, res);\n        });\n      } catch (error) {\n        alert(\"You need to install the xBull extension\");\n      }\n    },\n  ],\n];\n\nconst GotPublicKey = (state: IState, res: any) => ({\n  ...state,\n  wallet: \"xbull\",\n  publicKey: res,\n});\n","import { app } from \"hyperapp\";\nimport html from \"hyperlit\";\nimport IState from \"./ui/state/state\";\nimport walletPage from \"./ui/components/pages/wallet\";\nimport { getPublicKey } from \"./wallets/albedo/albedo\";\n\nimport { getPublicKeyFreighter } from \"./wallets/freighter/freighter\";\n\nimport { getPublicKeyXBull } from \"./wallets/xbull/xbull\";\n\n\nconst baseState: IState = {\n  publicKey: \"\",\n  wallet: \"\",\n};\n\napp({\n  init: baseState,\n  view: (state: IState) =>\n    html`<div>\n      ${state.wallet\n        ? walletPage({ wallet: state.wallet, publicKey: state.publicKey })\n        : html`<ul>\n            <button onclick=${getPublicKey}>Connect with Albedo</button>\n            <button onclick=${getPublicKeyFreighter}>\n              Connect with Freighter\n            </button>\n            <button onclick=${getPublicKeyXBull}>Connect with xBull</button>\n          </ul>`}\n    </div>`,\n  node: document.getElementById(\"app\")!,\n});\n"],"names":["$079b1ffbc7d5b2a4$var$EMPTY_OBJ","$079b1ffbc7d5b2a4$var$EMPTY_ARR","$079b1ffbc7d5b2a4$var$id","a","$079b1ffbc7d5b2a4$var$map","map","$079b1ffbc7d5b2a4$var$isArray","Array","isArray","$079b1ffbc7d5b2a4$var$enqueue","requestAnimationFrame","setTimeout","$079b1ffbc7d5b2a4$var$createClass","obj","out","tmp","k","length","$079b1ffbc7d5b2a4$var$shouldRestart","b","$079b1ffbc7d5b2a4$var$getKey","vdom","key","$079b1ffbc7d5b2a4$var$patchProperty","node","oldValue","newValue","listener","isSvg","setProperty","events","slice","addEventListener","removeEventListener","removeAttribute","setAttribute","$079b1ffbc7d5b2a4$var$createNode","props","type","document","createTextNode","tag","createElementNS","is","createElement","i","children","appendChild","$079b1ffbc7d5b2a4$var$maybeVNode","$079b1ffbc7d5b2a4$var$patch","parent","oldVNode","newVNode","nodeValue","insertBefore","removeChild","tmpVKid","oldVKid","oldKey","newKey","oldProps","newProps","oldVKids","newVKids","oldHead","newHead","oldTail","newTail","keyed","newKeyed","memo","$079b1ffbc7d5b2a4$var$propsChanged","$079b1ffbc7d5b2a4$export$6f093cfa640b7166","$079b1ffbc7d5b2a4$var$recycleNode","nodeType","$079b1ffbc7d5b2a4$var$createVNode","nodeName","toLowerCase","call","childNodes","value","$addda2bc36e1a3a4$var$ws","c","$addda2bc36e1a3a4$var$parse","strs","vals","tagname","propname","ch1","list","buffer","mode","newline","listpush","x","push","pushnode","ch","flat","$079b1ffbc7d5b2a4$export$dda1d9f60106f0e9","gotText","trim","trimEnd","open","gotTagName","m","defaultProp","gotProp","v","close","j","$addda2bc36e1a3a4$export$2e2bcd8739ae039","$3768ff3f3e0b409e$export$2e2bcd8739ae039","wallet","publicKey","$d10de665e8ad2488$export$93a74f0a370ae466","rn","Uint32Array","crypto","getRandomValues","Math","floor","random","from","n","toString","join","$5039e4e61f4d032d$export$2e2bcd8739ae039","public_key","risk","title","description","unsafe","implicitFlow","params","token","required","callback","require_existing","returns","pubkey","signed_message","signature","sign_message","message","original_message","message_signature","tx","xdr","network","submit","tx_hash","signed_envelope_xdr","result","pay","amount","destination","asset_code","asset_issuer","memo_type","trust","limit","exchange","max_price","sell_asset_code","sell_asset_issuer","buy_asset_code","buy_asset_issuer","implicit_flow","intents","granted","grants","session","valid_until","manage_account","$1e1d28ed0d781f37$export$2e2bcd8739ae039","unhandledError","code","externalError","invalidIntentRequest","actionRejectedByUser","horizonError","callbackError","$fbfa61a2493a19a4$var$TransportHandler","targetWindow","ephemeral","this","windowHandler","isLoaded","pendingRequests","preprocessRequestParams","onLoaded","Promise","resolve","reject","onLoadedCallback","then","messageHandler","bind","window","$28670b8e0d18f42b$exports","JSON","parse","prototype","data","albedo","version","markLoaded","__reqid","albedoIntentResult","pending","error","transportCloseHandler","hasOwnProperty","postMessage","nonce","$ab391d68868ed8c9$export$a4f9a040687778de","frontendUrl","iframe","style","border","Object","assign","width","height","frameBorder","$fd5235b3e22cf0ae$var$ImplicitSession","validUntil","freeze","$1809c018e3e4eff1$var$getStorage","sessionStorage","$1809c018e3e4eff1$var$retrieveSessionFromStorage","restored","getItem","$fd5235b3e22cf0ae$export$2e2bcd8739ae039","isExpired","$1809c018e3e4eff1$export$ccf75fe524dd35da","$1809c018e3e4eff1$export$8a39ede56f448015","intent","includes","$b0fb6cc2c6cb4054$var$intentError","msg","Error","ext","$b0fb6cc2c6cb4054$export$9f338b091410382a","intentDescriptor","requestParams","$b0fb6cc2c6cb4054$var$prepareRequestParams","url","dualScreenLeft","undefined","screenLeft","screenX","dualScreenTop","screenTop","screenY","left","innerWidth","documentElement","clientWidth","screen","w","top","innerHeight","clientHeight","h","dialogWindow","$fbfa61a2493a19a4$export$2e2bcd8739ae039","$ab391d68868ed8c9$export$7e0e8c37c16296db","$b0fb6cc2c6cb4054$var$prepareTransport","transport","intentResult","setItem","stringify","$1809c018e3e4eff1$export$7288d4884b9bc1a3","$b0fb6cc2c6cb4054$var$sendRequest","e","res","fetch","$40744f2957335d48$var$AlbedoIntent","intentInterface","request","keys","storage","filter","indexOf","substr","albedoIntent","target","tagName","href","preventDefault","stopImmediatePropagation","pathname","intentName","search","URL","alert","location","origin","query","dest","kv","split","decodeURIComponent","$85a75b52659bb7fe$var$parseQuery","$6a722e5a7a42ebe0$var$GotPublicKey","state","$6a722e5a7a42ebe0$export$889def73691f9837","dispatch","$40744f2957335d48$export$2e2bcd8739ae039","root","factory","installedModules","__webpack_require__","moduleId","exports","module","l","modules","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","t","__esModule","ns","create","default","object","property","p","s","SERVICE_TYPES","EXTERNAL_SERVICE_TYPES","NETWORK_NAMES","NETWORKS","CREATE_ACCOUNT","FUND_ACCOUNT","ADD_ACCOUNT","IMPORT_ACCOUNT","LOAD_ACCOUNT","MAKE_ACCOUNT_ACTIVE","UPDATE_ACCOUNT_NAME","GET_MNEMONIC_PHRASE","CONFIRM_MNEMONIC_PHRASE","RECOVER_ACCOUNT","CONFIRM_PASSWORD","REJECT_ACCESS","GRANT_ACCESS","SIGN_TRANSACTION","REJECT_TRANSACTION","SIGN_OUT","SHOW_BACKUP_PHRASE","SAVE_SETTINGS","LOAD_SETTINGS","GET_CACHED_ASSET_ICON","CACHE_ASSET_ICON","REQUEST_ACCESS","SUBMIT_TRANSACTION","REQUEST_NETWORK","TESTNET","PUBNET","PUBLIC","NoExtensionInstalledError","sendMessageToContentScript","MESSAGE_ID","Date","now","source","messageId","freighter","messageListener","event","T","messagedId","getPublicKey","response","console","signTransaction","transactionXdr","signedTransaction","isConnected","getNetwork","r1","t2","A","S","_","u","define","amd","freighterApi","$58c7f5c891f844bf$var$GotPublicKey","$58c7f5c891f844bf$export$e6e634a00bd29dac","$da8415440722917e$exports","$1b6aea71c9923084$export$d85e8c8884b83eb5","xBullSDK","$1b6aea71c9923084$var$GotPublicKey","view","subscriptions","init","busy","subs","update","newState","render","oldSubs","newSubs","oldSub","newSub","$079b1ffbc7d5b2a4$var$patchSubs","parentNode","action","fx","$079b1ffbc7d5b2a4$export$729c8b7179294ba","getElementById"],"version":3,"file":"index.9e88f77c.js.map"}